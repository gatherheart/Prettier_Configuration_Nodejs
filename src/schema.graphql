type SampleResponse {
  text: String!
  error: Boolean!
}

type SampleMessage {
  channel: String!
  text: String!
}

type Query {
  sample1(name: String!): SampleResponse!
  sample2(slotId: String!): Sample2Response!
}

type Mutation {
  sample1(channel: String!, text: String!): SampleMessage!
  sample2(slotId: String!, position: PositionArgs!, typeName: String!): Sample2Response!
}

type Subscription {
  sample1(channel: String!): SampleMessage!
}

type Sample2Response {
  slot: Slot
  errorMessage: String
  error: Boolean!
}

type User {
  uid: String!
  userName: String!
  email: String!
}

type Slot {
  slotId: String!
  position: Position!
  state: SlotState
  typeName: String!
}

type Position {
  x: Float
  y: Float
  angle: Float
}

input PositionArgs {
  x: Float
  y: Float
  angle: Float
}

enum SlotState {
  FREE
  OCCUPIED
  SOLD
}
